%YAML 1.2
---
name: Lox
file_extensions: [lox]
scope: source

# https://craftinginterpreters.com/the-lox-language.html

variables:
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase

contexts:
  main:
    - include: statements

  statements:
    - include: comments
    - include: expressions
    - match: ';'
      scope: punctuation.terminator

  expressions:
    - include: comments
    - include: keywords
    - include: variable-defs
    - include: function-defs
    - include: function-calls
    - include: class-defs

    - include: constants
    - include: numbers
    - include: operators

    - include: identifiers

    - include: block
    - include: parens
    - include: strings


    - match: '\)|\}'
      scope: invalid

  keywords:
    - match: \b(if|else|while|for)\b
      scope: keyword.control
    - match: \b(return)\b
      scope: keyword.control
    - match: \b(print)\b
      scope: keyword.other

  constants:
    - match: \b(nil|true|false)\b
      scope: constant.language

  numbers:
    # decimal floats
    - match: \b(\d+(?:\.\d*)?|\.\d+)\b
      scope: constant.numeric

  identifiers:
    - match: \b(this|super)\b
      scope: variable.language
    - match: \b{{identifier}}\b
      scope: variable.other

  operators:
    # arithmetic operator
    - match: \+|\-|/|\*|\!
      scope: keyword.operator.arithmetic
    - match: \b(and|or)\b
      scope: keyword.operator.logical
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison
    - match: \=
      scope: keyword.operator.assignment
    - match: \.
      scope: punctuation.accessor

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string
    - match: '"'
      scope: punctuation.definition.string.end
      pop: true
    - include: string_escaped_char

  string_escaped_char:
    - match: \\(?:\\|[nrt])
      scope: constant.character.escape
    - match: \\.
      scope: invalid

  block:
    - match: '\{'
      scope: punctuation.section
      push:
        - match: '\}'
          scope: punctuation.section
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section
      push:
        - meta_scope: meta.group.c
        - match: \)
          scope: punctuation.section
          pop: true
        - include: expressions

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: comment
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment
        - match: $\n?
          pop: true

  variable-defs:
    - include: comments
    - match: \b(var)\b
      scope: keyword.declaration
      push:
        - match: '{{identifier}}'
          # scope: entity.name.function
          pop: true


  function-calls:
    - include: comments
    - match: (?={{identifier}}\s*\()
      push:
        - match: '{{identifier}}'
          scope: variable.function
        - match: '\('
          scope: punctuation.section
          set:
            - match : \)
              scope: punctuation.section
              pop: true
            - include: expressions
            - match: \,
              scope: punctuation.separator

  function-defs:
    - include: comments
    - match: \b(fun)\b
      scope: keyword.declaration
      push:
        - meta_content_scope: entity.name.function
        - match: '\('
          scope: punctuation.group
          set:
            - match : \)
              scope: punctuation.group
              pop: true
            - match: \,
              scope: punctuation.separator
            - match: '{{identifier}}'
              scope: variable.parameter

  class-defs:
    - include: comments
    - match: \b(class)\b
      scope: keyword.declaration
      push:
        - match: \<
          scope: keyword.operator.other
          push:
          - match: '{{identifier}}'
            scope: entity.other.inherited-class
            pop: true

        - match: '{{identifier}}'
          scope: entity.name.class

        - match: \{
          scope: punctuation.section
          set: class-body

  class-body:
    - include: comments
    - include: method-defs
    - include: block
    - match: \}
      scope: punctuation.section
      pop: true

  method-defs:
    - include: comments
    - match: \b{{identifier}}\b
      scope: entity.name.function
      push:
        - match: '\('
          scope: punctuation.section
          set:
            - match : \)
              scope: punctuation.section
              pop: true
            - match: \,
              scope: punctuation.separator
            - match: '{{identifier}}'
              scope: variable.parameter